<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一碗杂货店</title>
  
  <subtitle>just go on</subtitle>
  <link href="/git-gao.github.io/atom.xml" rel="self"/>
  
  <link href="https://git-gao.github.io/"/>
  <updated>2018-04-25T14:42:41.656Z</updated>
  <id>https://git-gao.github.io/</id>
  
  <author>
    <name>gaoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>流</title>
    <link href="https://git-gao.github.io/2018/04/24/%E6%B5%81/"/>
    <id>https://git-gao.github.io/2018/04/24/流/</id>
    <published>2018-04-24T14:17:53.000Z</published>
    <updated>2018-04-25T14:42:41.656Z</updated>
    
    <content type="html"><![CDATA[<p>#流</p><h3 id="什么是流？"><a href="#什么是流？" class="headerlink" title="什么是流？"></a>什么是流？</h3><blockquote><p><strong>流</strong>是一个抽象的概念，是一组具有方向性的字节集合，是对数据传输的总体或抽象。数据在输入设备和输出设备之间的传输称之为流。设备可以是文件、网络、内存等。</p></blockquote><ol><li><p>处理的数据单位不同，可分为：字符流，字节流</p></li><li><p>数据流方向不同，可分为：输入流，输出流</p></li></ol><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p><strong>1.以字节流的形式读取文件内容</strong></p><p><strong>InputStream</strong> 是字节输入流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br><strong>FileInputStream</strong> 是InputStream子类，以FileInputStream 为例进行文件读取</p><p>###ASCII码 概念</p><p>所有的数据存放在计算机中都是以数字的形式存放的。 所以字母就需要转换为数字才能够存放。</p><p>比如A就对应的数字65，a对应的数字97. 不同的字母和符号对应不同的数字，就是一张码表。</p><p>ASCII是这样的一种码表。 只包含简单的英文字母，符号，数字等等。 不包含中文，德文，俄语等复杂的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/JavaSystem/src/TestFileStream/textStream.txt"</span>);</span><br><span class="line"><span class="comment">//创建基于文件的输入流</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">//创建字节数组，其长度就是文件的长度</span></span><br><span class="line"><span class="keyword">byte</span>[] all = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line">fis.read(all);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> b : all)&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用完流都应该关闭流</span></span><br><span class="line">fis.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="./1523803601270.png" alt="Alt text"></p><p><strong>2. 以字节流的形式向文件写入数据</strong></p><p><strong>OutputStream</strong>是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。</p><p><strong>FileOutputStream</strong> 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//// 准备文件outputStream.txt其中的内容是空的</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/JavaSystem/src/TestFileStream/outputStream.txt"</span>);</span><br><span class="line"><span class="comment">//准备长度4的字节数，用97,98,65,66初始化</span></span><br><span class="line"><span class="keyword">byte</span> data[] = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">65</span>,<span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//创建基于文件的输出流</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"><span class="comment">//将数据写入到输出流</span></span><br><span class="line">fos.write(data);</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">fos.close();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注: 如果文件 outputStream.txt不存在，写出操作会自动创建该文件。<br>但是如果是文件 F:/xyz/outputStream.txt，而目录xyz又不存在，会抛出异常</p></blockquote><p>outputStream.txt 文件内容：</p><p><img src="./1523804521078.png" alt="Alt text"></p><h3 id="练习-拆分文件"><a href="#练习-拆分文件" class="headerlink" title="练习-拆分文件"></a>练习-拆分文件</h3><blockquote><p>找到一个大于100k的文件，按照100k为单位，拆分成多个子文件，并且以编号作为文件名结束。<br>比如文件 eclipse.exe，大小是309k。<br>拆分之后，成为<br>eclipse.exe-0<br>eclipse.exe-1<br>eclipse.exe-2<br>eclipse.exe-3</p></blockquote><p><strong>解题思路分析</strong><br> 文件拆分的详细步骤</p><ul><li>1.创建文件对象、设置拆分文件的大小</li><li>2.判断文件是否可以分割，将文件的内容读取到字节数组中</li><li>3.计算文件按要求可拆分的数量</li><li>4.遍历，设置拆分后的文件名、获取文件的路径，以此创建拆分后的文件对象</li><li>5.将源文件的内容截取出来存放到拆分后的字节数组中</li><li>6.将截取后的内容存放到设置的文件对象中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplitFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建文件对象</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/fileText/filetext.txt"</span>);</span><br><span class="line"><span class="comment">//设置每个文件的大小</span></span><br><span class="line"><span class="keyword">int</span> eachSize = <span class="number">100</span>*<span class="number">1024</span>;</span><br><span class="line">splitFile(eachSize,file);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建文件分割的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">splitFile</span><span class="params">(<span class="keyword">int</span> eachSize, File file)</span></span>&#123;</span><br><span class="line"><span class="comment">//判断文件是否符合分割要求</span></span><br><span class="line"><span class="keyword">if</span> (file.length() == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"文件不符合分割要求！！！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span> [] allFile = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) file.length()];</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">FileInputStream fin = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"><span class="comment">//将文件读取到数组中</span></span><br><span class="line">fin.read(allFile);</span><br><span class="line">fin.close();</span><br><span class="line"><span class="comment">/*for (byte b: singleFile)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算文件拆分后的数量</span></span><br><span class="line"><span class="keyword">int</span> splitfileCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ((allFile.length) % eachSize == <span class="number">0</span>)&#123;</span><br><span class="line">splitfileCount = allFile.length / eachSize;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">splitfileCount = allFile.length / eachSize + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件名、文件路径</span></span><br><span class="line">String filePath = file.getParent()+<span class="string">"\\splitFile"</span>;</span><br><span class="line"><span class="comment">//在当前文件路径下创建拆分的文件,并将内容分别写入到拆分的文件中</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; splitfileCount; i++)&#123;</span><br><span class="line"><span class="comment">//创建文件名、文件路径</span></span><br><span class="line">String fileName = <span class="string">"eclipse.exe-"</span> + i + <span class="string">".txt"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建分割后的文件对象</span></span><br><span class="line">File splitFile = <span class="keyword">new</span> File(filePath, fileName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将源文件内容复制到分割后的文件中,使用copyOfRange()函数</span></span><br><span class="line"><span class="keyword">byte</span>[] eachFile;</span><br><span class="line"><span class="comment">//将源文件的内容截取出来</span></span><br><span class="line"><span class="keyword">if</span> (i != splitfileCount - <span class="number">1</span>)&#123;</span><br><span class="line">eachFile = Arrays.copyOfRange(allFile, eachSize*i, eachSize*(i+<span class="number">1</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">eachFile = Arrays.copyOfRange(allFile, eachSize*i, allFile.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将截取出来的文件内容再存储到文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//创建基于文件的输出流</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(splitFile);</span><br><span class="line"><span class="comment">//将数据写入到输出流</span></span><br><span class="line">fos.write(eachFile);</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">fos.close();</span><br><span class="line">System.out.println(<span class="string">"输出子文件:"</span> + splitFile.getAbsolutePath() + <span class="string">", 其大小是:"</span> + splitFile.length() + <span class="string">"字节"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并分割的文件,合并文件练习，暂时注释</span></span><br><span class="line"><span class="comment">//mergeFile(filePath);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><img src="./1524497761608.png" alt="Alt text"></p><p>拆分后的文件目录如下：<br><img src="./1524497838502.png" alt="Alt text"></p><h3 id="练习-合并文件"><a href="#练习-合并文件" class="headerlink" title="练习-合并文件"></a>练习-合并文件</h3><blockquote><p>把上述拆分出来的文件，合并成一个原文件。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 文件合并方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeFile</span><span class="params">(String filePath)</span></span>&#123;</span><br><span class="line"><span class="comment">//通过获取分割后的文件路径，创建文件对象</span></span><br><span class="line">File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line"><span class="comment">//获取该文件目录下的所有文件，listFiles()是带有文件路径的列表，此处用list()</span></span><br><span class="line">String[] splitfileList = file.list();</span><br><span class="line"><span class="comment">//合并后的文件存放位置</span></span><br><span class="line">File mergeFile = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/fileText/mergeFile/mergeFile.txt"</span>); </span><br><span class="line">OutputStream fos = <span class="keyword">null</span>; </span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//创建基于文件的输出流</span></span><br><span class="line">fos = <span class="keyword">new</span> FileOutputStream(mergeFile);</span><br><span class="line"><span class="comment">//遍历文件目录下的文件，读取内容</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; splitfileList.length; i++)&#123;</span><br><span class="line"><span class="comment">//创建文件对象</span></span><br><span class="line">File spFile = <span class="keyword">new</span> File(filePath+<span class="string">"/"</span>+splitfileList[i]);</span><br><span class="line"><span class="comment">//创建文件的输入流</span></span><br><span class="line">FileInputStream fin = <span class="keyword">new</span> FileInputStream(spFile);</span><br><span class="line"><span class="keyword">byte</span>[] splitContent = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) spFile.length()];</span><br><span class="line"><span class="comment">//将文件读取到数组中</span></span><br><span class="line"><span class="keyword">int</span> len = fin.read(splitContent);</span><br><span class="line"><span class="comment">//文件内容写入到输出流</span></span><br><span class="line">fos.write(splitContent,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//关闭输入流</span></span><br><span class="line">fin.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println("合并后的文件:" + mergeFile.getAbsolutePath() + ",其大小是:" + mergeFile.length() + "字节");</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"合并后的文件:"</span> + mergeFile.getAbsolutePath() + <span class="string">",其大小是:"</span> + mergeFile.length() + <span class="string">"字节"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fos!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//关闭输出流</span></span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="./1524499579481.png" alt="Alt text"></p><p>合并后的文件：</p><p><img src="./1524499597357.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#流&lt;/p&gt;
&lt;h3 id=&quot;什么是流？&quot;&gt;&lt;a href=&quot;#什么是流？&quot; class=&quot;headerlink&quot; title=&quot;什么是流？&quot;&gt;&lt;/a&gt;什么是流？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;流&lt;/strong&gt;是一个抽象的概念，是一组具有方向性
      
    
    </summary>
    
    
      <category term="java流 I/O" scheme="https://git-gao.github.io/tags/java%E6%B5%81-I-O/"/>
    
  </entry>
  
  <entry>
    <title>文件基本操作</title>
    <link href="https://git-gao.github.io/2018/04/14/%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://git-gao.github.io/2018/04/14/文件基本操作/</id>
    <published>2018-04-14T13:12:37.000Z</published>
    <updated>2018-04-14T13:31:30.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见文件操作相关的方法（1）"><a href="#常见文件操作相关的方法（1）" class="headerlink" title="常见文件操作相关的方法（1）"></a>常见文件操作相关的方法（1）</h3><ol><li>文件绝对路径：<strong>getAbsolutePath()</strong></li><li>文件是否存在：<strong>exists()</strong></li><li>判断是否是文件夹：<strong>isDirectory()</strong></li><li>判断是否是文件：<strong>isFile()</strong></li><li>获取文件内容的长度：<strong>length()</strong></li><li>获取文件最后的修改时间：<strong>lastModified()</strong></li><li>文件重命名：<strong>renameTo()</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">newTestFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/JavaSystem/src/TestIO/fileDirectory"</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(<span class="string">"file2.txt"</span>);</span><br><span class="line">File file = <span class="keyword">new</span> File(file1,<span class="string">"file2.txt"</span>);</span><br><span class="line">System.out.println(<span class="string">"当前文件是："</span>+file);</span><br><span class="line">System.out.println(<span class="string">"绝对路径:"</span>+file.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">"判断是否存在:"</span>+file.exists());</span><br><span class="line">System.out.println(<span class="string">"判断是否是文件夹:"</span>+file.isDirectory());</span><br><span class="line">System.out.println(<span class="string">"判断是否是文件:"</span>+file.isFile());</span><br><span class="line">System.out.println(<span class="string">"获取文件的长度:"</span>+file.length());<span class="comment">//file2.txt:"新文件内容text2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件最后修改时间</span></span><br><span class="line"><span class="keyword">long</span> time = file.lastModified();</span><br><span class="line">Date date = <span class="keyword">new</span> Date(time);</span><br><span class="line">System.out.println(<span class="string">"文件修改的时间戳"</span>+time+<span class="string">",获取文件的最后修改时间："</span>+date);</span><br><span class="line"><span class="comment">//文件重命名</span></span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/JavaSystem/src/TestIO/fileDirectory/file3.txt"</span>);</span><br><span class="line">file.renameTo(file3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./1523542437886.png" alt="Alt text"></p><h3 id="常见文件操作相关的方法（2）"><a href="#常见文件操作相关的方法（2）" class="headerlink" title="常见文件操作相关的方法（2）"></a>常见文件操作相关的方法（2）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">newTestFile2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/JavaSystem/src/TestIO"</span>);</span><br><span class="line"><span class="comment">// 以字符串数组的形式，返回当前文件夹下的所有文件（不包含子文件夹的子文件及子文件夹）</span></span><br><span class="line">String[] fis = file.list();</span><br><span class="line">System.out.print(<span class="string">"文件列表:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; fis.length; i++)&#123;</span><br><span class="line">System.out.print(fis[i]+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">// 以文件数组的形式，返回当前文件夹下的所有文件（不包含子文件及子文件夹）</span></span><br><span class="line">System.out.print(<span class="string">"文件数组:"</span>);</span><br><span class="line">File[] fs = file.listFiles();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; fs.length; i++)&#123;</span><br><span class="line">System.out.println(fs[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以字符串形式返回当前文件所在文件夹</span></span><br><span class="line">System.out.println(<span class="string">"当前文件的所在文件夹"</span>+file.getParent());</span><br><span class="line"></span><br><span class="line"><span class="comment">//以文件形式返回当前文件所在文件夹</span></span><br><span class="line">System.out.println(<span class="string">"当前文件的所在文件夹"</span>+file.getParentFile());</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 如果当前文件夹不存在，则创建该文件夹，如果父文件夹不存在，创建就无效</span></span><br><span class="line">System.out.println(file.mkdir());</span><br><span class="line"><span class="comment">// 创建一个空文件,如果父文件夹不存在，就会抛出异常</span></span><br><span class="line">System.out.println(file.createNewFile());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列出所有的盘符c: d: e: 等等</span></span><br><span class="line">System.out.print(<span class="string">"列出盘符:"</span>);</span><br><span class="line">File[] litsR = file.listRoots();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; litsR.length; i++)&#123;</span><br><span class="line">System.out.println(litsR[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件目录结构</p><p><img src="./1523547433151.png" alt="Alt text"></p><p>输出结果：</p><p><img src="./1523547482682.png" alt="Alt text"></p><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><blockquote><p> 一般说来操作系统都会安装在C盘，所以会有一个 C:\WINDOWS目录。<br> 遍历这个目录下所有的文件(不用遍历子目录)<br>找出这些文件里，最大的和最小(非0)的那个文件，打印出他们的文件名</p></blockquote><blockquote><p>注: <code>最小的文件不能是0长度</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:/WINDOWS"</span>);</span><br><span class="line"><span class="comment">//以文件数组的形式，获取当前文件夹下的所有文件</span></span><br><span class="line">File[] filist = file.listFiles();</span><br><span class="line"><span class="comment">//最大整形 2147483648</span></span><br><span class="line"><span class="keyword">long</span> minSize = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">long</span> maxSize = <span class="number">0</span>;</span><br><span class="line">File maxL  = <span class="keyword">null</span>;</span><br><span class="line">File minL  = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; filist.length; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(filist[i].isDirectory())&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxSize &lt; filist[i].length())&#123;</span><br><span class="line">maxSize = filist[i].length();</span><br><span class="line">maxL = filist[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minSize &gt; filist[i].length()&amp;&amp; filist[i].length() != <span class="number">0</span>)&#123;</span><br><span class="line">minSize = filist[i].length();</span><br><span class="line">minL = filist[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大文件："</span> + maxL+<span class="string">",长度："</span>+maxSize);</span><br><span class="line">System.out.println(<span class="string">"最小文件："</span> + minL+<span class="string">",长度："</span>+minSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="./1523712547466.png" alt="Alt text"></p><p><strong>上例，遍历子所有文件包括文件及下的子文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">traversalFiles2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> minSize = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> maxSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> File maxL  = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> File minL = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归来遍历一个文件夹的子文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line"><span class="comment">//如果是文件则判断文件的大小</span></span><br><span class="line"><span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line"><span class="keyword">if</span>(maxSize &lt; file.length())&#123;</span><br><span class="line">maxSize = file.length();</span><br><span class="line">maxL = file;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minSize &gt; file.length()&amp;&amp; file.length() != <span class="number">0</span>)&#123;</span><br><span class="line">minSize = file.length();</span><br><span class="line">minL = file;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">File[] fileList = file.listFiles();</span><br><span class="line"><span class="comment">//如果不是空文件夹，则遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> != fileList)&#123;</span><br><span class="line"><span class="keyword">for</span> (File fs : fileList)&#123;</span><br><span class="line">listFiles(fs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"C:/WINDOWS"</span>);</span><br><span class="line"><span class="comment">//以文件数组的形式，获取当前文件夹下的所有文件</span></span><br><span class="line">System.out.println(<span class="string">"正在查找..."</span>);</span><br><span class="line"><span class="comment">//开始时间</span></span><br><span class="line"><span class="keyword">long</span> starTime=System.currentTimeMillis();</span><br><span class="line"><span class="comment">//开始遍历子文件</span></span><br><span class="line">listFiles(file);</span><br><span class="line"><span class="comment">//结束时间</span></span><br><span class="line"><span class="keyword">long</span> endTime=System.currentTimeMillis();</span><br><span class="line"><span class="comment">//运行时间</span></span><br><span class="line"><span class="keyword">long</span> Time=endTime-starTime;</span><br><span class="line">System.out.println(<span class="string">"最大的文件是:"</span>+ maxL.getAbsolutePath()+<span class="string">",其大小为："</span>+maxSize);</span><br><span class="line">System.out.println(<span class="string">"最小的文件是:"</span>+ minL.getAbsolutePath()+<span class="string">",其大小为："</span>+minSize);</span><br><span class="line">System.out.println(<span class="string">"程序运行时间:"</span>+Time/<span class="number">1000</span>+<span class="string">"s"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><p><img src="./1523706523653.png" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常见文件操作相关的方法（1）&quot;&gt;&lt;a href=&quot;#常见文件操作相关的方法（1）&quot; class=&quot;headerlink&quot; title=&quot;常见文件操作相关的方法（1）&quot;&gt;&lt;/a&gt;常见文件操作相关的方法（1）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;文件绝对路径：&lt;strong&gt;g
      
    
    </summary>
    
      <category term="Java文件" scheme="https://git-gao.github.io/categories/Java%E6%96%87%E4%BB%B6/"/>
    
    
      <category term="文件对象" scheme="https://git-gao.github.io/tags/%E6%96%87%E4%BB%B6%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>java异常</title>
    <link href="https://git-gao.github.io/2018/04/11/java%E5%BC%82%E5%B8%B8/"/>
    <id>https://git-gao.github.io/2018/04/11/java异常/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2018-04-10T17:02:20.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>Java 异常是 Java 提供的一种识别及响应错误的一致性机制</p><p>例如打开本地的一个文件，如下代码，这个时候 FileInputStream 编译时会报错，<br>提示 FileNotFoundException<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception; </span><br><span class="line">    <span class="keyword">import</span> java.io.File; </span><br><span class="line">    <span class="keyword">import</span> java.io.FileInputStream;   </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/e_tex.txt"</span>);              </span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>使用异常处理机制 try-catch ，不管是文件路径不对还是文件不存在都可以避免异常</p><p><strong>本地文件为 e_text.txt</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Testexcption;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstExcptionTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"F:/winner_info/Learnhow2j/e_tex.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">System.out.println(<span class="string">"文件打开成功！"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">System.out.println(<span class="string">"文件打开失败！"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./1523290041026.png" alt="Alt text"></p><p>控制台打印出来的信息是 java.io.FileNotFoundException</p><blockquote><p>printStackTrace()方法的意思是：在命令行打印异常信息在程序中出错的位置及原因。</p></blockquote><p>当使用 System.out.println(e) 时，也会打印错误信息，但仅显示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.FileNotFoundException: F:\winner_info\Learnhow2j\e_tex.txt (系统找不到指定的文件。)</span><br></pre></td></tr></table></figure></p><p><strong>e.printStackTrace();是打印异常的堆栈信息，指明错误原因，其实当发生异常时，通常要处理异常，这是编程的好习惯，所以e.printStackTrace()可以方便你调试程序！</strong></p><hr><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ol><li><p>多个异常需要处理时，这样可以这样写，好处是捕捉的代码更紧凑，不足之处是，一旦发生异常，不能确定到底是哪种异常，需要通过 instanceof 进行判断具体的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (FileNotFoundException | ParseException e)</span><br></pre></td></tr></table></figure></li><li><p>或者分别进行catch，这种方法能清晰的了解异常出现的具体情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)&#123;</span><br><span class="line">System.out.println(<span class="string">"文件打开失败！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ParseException e)&#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)&#123;</span><br><span class="line">System.out.println(<span class="string">"日期解析错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常都是Exception的子类，使用Exception一起catch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">System.out.println(<span class="string">"文件打开成功！"</span>);</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date data = sdf.parse(<span class="string">"2018-0"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileNotFoundException)&#123;</span><br><span class="line">System.out.println(<span class="string">"文件打开失败！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParseException)&#123;</span><br><span class="line">System.out.println(<span class="string">"日期解析错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="finally语句块"><a href="#finally语句块" class="headerlink" title="finally语句块"></a>finally语句块</h4><blockquote><p> finally 语句块并不一定是会执行的，finally 语句块是在 try 或者 catch 中的 return 语句之前执行的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">finallyTest</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">System.out.println(<span class="string">"reture value of test() : "</span> + test()); </span><br><span class="line">&#125;     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;         </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">System.out.println(<span class="string">"try block"</span>);  </span><br><span class="line">    i = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">//出现异常</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">System.out.println(<span class="string">"exception block"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;  </span><br><span class="line">System.out.println(<span class="string">"finally block"</span>);  </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="./1523374251811.png" alt="Alt text"></p><p>关于 finally 的研究可以参考链接<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-finally/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-finally/</a></p><h4 id="throw-异常抛出"><a href="#throw-异常抛出" class="headerlink" title="throw 异常抛出"></a>throw 异常抛出</h4><p>主方法调用method1<br>method1调用method2<br>method2中解析日期</p><p>method2中需要进行异常处理<br>但是method2不打算处理，而是把这个异常通过throws抛出去<br>那么method1就会接到该异常。 处理办法也是两种，要么是try catch处理掉，要么也是抛出去。</p><p>method1选择本地try catch住 一旦try catch住了，就相当于把这个异常消化掉了，主方法在调用method1的时候，就不需要进行异常处理了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">throwException</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">methord1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methord1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">methord2();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">System.out.println(<span class="string">"日期解析失败！"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methord2</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date data = sdf.parse(<span class="string">"18-01"</span>);</span><br><span class="line">System.out.println(<span class="string">"日期解析成功！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><img src="./1523375323460.png" alt="Alt text"></p><blockquote><p> throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li>throws 出现在方法声明上，而throw通常都出现在方法体内。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</li></ol></blockquote><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p><img src="./1523376303040.png" alt="Alt text"></p><h4 id="运行异常"><a href="#运行异常" class="headerlink" title="运行异常"></a>运行异常</h4><blockquote><p> <strong>异常可分为运行异常（RuntimeException）和检查异常（Checked Exceptions）两种</strong></p></blockquote><p>RuntimeException 在默认情况下会得到自动处理。所以通常用不着捕获 RuntimeException</p><p>Runtime 如除数是 0 和数组下标越界等，其产生频繁，处理麻烦，若显示申明或者捕获将会对程序的可读性和运行效率影响很大。</p><p>例如常见的运行时异常： <strong><code>ArithmeticException</code>，<code>ArrayIndexOutOfBoundsException</code>，<code>NullPointerException</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//任何除数不能为0:ArithmeticException</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">5</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下标越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">5</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">String str = <span class="keyword">null</span>;</span><br><span class="line">str.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检查异常"><a href="#检查异常" class="headerlink" title="检查异常"></a>检查异常</h4><p>除了runtimeException以外的异常，都属于checkedException</p><p><strong>只有java语言提供了Checked异常，Java认为Checked异常都是可以被处理的异常，所以Java程序必须显示处理Checked异常</strong></p><p>例如上文的 <strong><code>FileNotFoundException</code>、<code>ParseException、ClassNotFoundException</code></strong>，在编译之前就需要进行异常的处理，否则无法通过编译。</p><blockquote><p> 对Checked异常处理方法有两种</p><ol><li>当前方法知道如何处理该异常，则用try…catch块来处理该异常。</li><li>当前方法不知道如何处理，则在定义该方法是声明抛出该异常。</li></ol></blockquote><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p><strong>与异常不同的是Error及其子类的对象不应被抛出。</strong></p><p>当程序发生不可控这种错误时，通常的做法是通知用户并中止程序的执行。</p><p>Error 是 Throwable 的子类，代表编译时间和系统错误，用于指示合理的应用程序<code>不应该试图捕获</code>的严重问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是异常&quot;&gt;&lt;a href=&quot;#什么是异常&quot; class=&quot;headerlink&quot; title=&quot;什么是异常&quot;&gt;&lt;/a&gt;什么是异常&lt;/h3&gt;&lt;p&gt;Java 异常是 Java 提供的一种识别及响应错误的一致性机制&lt;/p&gt;
&lt;p&gt;例如打开本地的一个文件，如下代码，这
      
    
    </summary>
    
    
      <category term="java 异常" scheme="https://git-gao.github.io/tags/java-%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>CSS定位流</title>
    <link href="https://git-gao.github.io/2018/04/07/CSS%E5%AE%9A%E4%BD%8D%E6%B5%81/"/>
    <id>https://git-gao.github.io/2018/04/07/CSS定位流/</id>
    <published>2018-04-07T13:40:00.000Z</published>
    <updated>2018-04-10T17:00:37.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS的定位方式"><a href="#CSS的定位方式" class="headerlink" title="CSS的定位方式"></a>CSS的定位方式</h2><p><strong>absolute</strong>, <strong>relative</strong>,  <strong>fixed</strong>，<strong>static</strong></p><p>css共有四种定位分别是：相对定位、绝对定位、静态定位、固定定位。</p><hr><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><blockquote><p>相对定位：相对自己之前在标准流中的定位，不是父元素的左上角</p></blockquote><p>我们来举个实例<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">&lt;div class=&quot;box1&quot;&gt;box1&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box2&quot;&gt;box2&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box3&quot;&gt;box3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="./1523080313332.png" alt="Alt text"></p><p>现在我们将 box2 进行相对定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如图所示</p><p><img src="./1523080272717.png" alt="Alt text"></p><blockquote><p>相对定位：position:relative，不脱离标准流，我们设置方向上的定位属性来改变盒子的位置，但是同一方向上只能设置一个方向属性，例如 left和 right 只能设置其一，如果两个属性都设置了，只有 left 起作用，right 无效。</p></blockquote><p><strong>由于相对定位不脱离标准流，所以当为元素设置 margin/padding  属性时会影响页面的布局</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./1523087545533.png" alt="Alt text"></p><p>当给 box2 设置 margin-top: 20xp 时，box3 也随着 box2 下降了20px距离，具体的原理如图：</p><ol><li><p>首先 box2 上左各移动 20px 如下图：<br><img src="./1523088740242.png" alt="Alt text"></p></li><li><p>然后 box2 再 margin-top：20px </p><blockquote><p>注意一点：margin 不会加给定位之后的元素，而是定位之前的元素</p></blockquote></li></ol><p>所以    此时的位置变化如图：<br><img src="./1523089143988.png" alt="Alt text"></p><p><img src="./1523089252140.png" alt="Alt text"></p><p>标准流中的 box2 下移 20px，box3被box2往下挤 20px ，而<br> box2 又设置了 top:10px，因而就出现了上图的变化过程。</p><blockquote><p>相对定位不脱离标准流，故而是区分块级元素/行内元素/行内块级元素</p></blockquote><hr><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p><strong>绝对定位就是相对于body或者某个定位流中的祖先元素来定位</strong></p><blockquote><p>绝对定位：position:absolute; 绝对定位的元素脱离标准流，因为绝对定位的元素不区分块级元素/行内元素/行内块级元素</p></blockquote><p>依旧将改变 box2 的定位属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="./1523090572428.png" alt="Alt text"></p><p>我们看到 box2 脱离了 box 的范围，移到了 body 的旁边，仔细发现其实是 box2 距离 body 的 top:10px ，left:10px 。</p><blockquote><p>由上可知，默认情况下绝对定位元素是相对于body定位的</p></blockquote><p>现在我们也将 box 元素设置为定位流 position:absolute，来看看效果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#23241f</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">&lt;div class="box1"&gt;box1&lt;/div&gt;</span><br><span class="line">&lt;div class="box2"&gt;box2&lt;/div&gt;</span><br><span class="line">&lt;div class="box3"&gt;box3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="./1523091404488.png" alt="Alt text"></p><p>此时 box2 是相对 box 父元素定位的。 </p><blockquote><p>如果一个绝对定位的元素有祖先元素，并且祖先元素也是定位流，那么绝对定位的元素就会以定位流的祖先元素作为定位参考点。</p></blockquote><p>如果将 box 的position:absolute 改为 position:static<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>发现并 没有起作用。box2 还是相对 body 定位的。<br><img src="./1523090572428.png" alt="Alt text"></p><blockquote><p>祖先元素的定位流指的是绝对定位(absolute)、相对定位(relative)、固定定位(fixed)，静态定位无效</p></blockquote><p>现在又有如下例子，设置box2有多个父元素<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#23241f</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class="box"&gt;</span><br><span class="line">&lt;div class="box1"&gt;</span><br><span class="line">&lt;div class="box2"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="./1523092775493.png" alt="Alt text"></p><p>当 box2 的父元素 box1 和 box 都设置了 position:absolute属性时，box2是相对于 box1 定位的。</p><blockquote><p> 如果一个绝对定位的元素有多个祖先元素，并且祖先元素都是定位流，那么这个绝对定位的元素以离他最近的那个定位流祖先元素作为参考点</p></blockquote><p><strong>绝对定位两个注意点</strong></p><blockquote><ol><li>如果定位流元素是以body作为参考点，那么其实是以网页首屏的宽度和高度作为参考点，而不是整个网页的宽高</li><li>绝对定位的元素会忽略祖先元素的 padding </li></ol></blockquote><hr><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p>固定定位：position:fixed，这个属性与绝对定位的用法几乎一样，区别在于，固定定位的元素不会随着浏览器的大小变化改变位置，也不会随着滚动条的移动而移动。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#23241f</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> <span class="number">600px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p><img src="./1523104463593.png" alt="Alt text"></p><p>另外，我们知道绝对定位的元素是以离最近的定位流元素作为参照点的</p><p>现在我们设置 box1 的偏移量<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="./1523104695672.png" alt="Alt text"></p><p>虽然给 box1 最近的元素 box 设置了 position:relative，但是它依然是相对 body 定位的</p><blockquote><p>固定定位（fixed）的参照点默认是浏览器的左上角，而且始终以 body 作为参照点。</p></blockquote><hr><h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><blockquote><p>默认元素就是静态定位，静态定位(static)不能作为元素定位的参照点</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS的定位方式&quot;&gt;&lt;a href=&quot;#CSS的定位方式&quot; class=&quot;headerlink&quot; title=&quot;CSS的定位方式&quot;&gt;&lt;/a&gt;CSS的定位方式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;absolute&lt;/strong&gt;, &lt;strong&gt;relative&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://git-gao.github.io/2018/04/03/hello-world/"/>
    <id>https://git-gao.github.io/2018/04/03/hello-world/</id>
    <published>2018-04-03T14:35:52.617Z</published>
    <updated>2018-04-07T13:43:28.876Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
